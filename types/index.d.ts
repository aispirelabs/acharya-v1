// Assuming interview.ts is in the same directory or path is correct
export { Interview, InterviewAttempt } from "./interview";

// Note: Django typically returns date/time fields as ISO strings.
// If you need Date objects on the frontend, parsing will be required.

export interface Feedback {
  id: string; // Assuming UUID string from Django
  interview: string; // Foreign Key to Interview (ID)
  user: string; // Foreign Key to User (ID)
  total_score: number;
  category_scores: Array<{
    name: string;
    score: number;
    comment: string;
  }>;
  strengths: string[];
  areas_for_improvement: string[];
  final_assessment: string;
  created_at: string; // ISO string
}

// Reflects fields from Django's UserSerializer based on AbstractUser + custom fields
export interface User {
  id: string; // Assuming UUID string from Django
  username: string;
  email: string;
  first_name?: string;
  last_name?: string;
  photoURL?: string; // snake_case from Django
  email_verified?: boolean; // snake_case from Django
  auth_provider?: string; // snake_case from Django
  date_joined?: string; // ISO string from Django
  last_login?: string | null; // ISO string or null from Django
}

// Params for creating feedback, sent to Django backend
export interface CreateFeedbackClientParams { // Renamed to avoid conflict if old one is used elsewhere
  interview_id: string;
  transcript: Array<{ role: string; content: string }>;
  // userId is removed, derived from auth token on backend
  // feedbackId is removed, generated by backend
}

// Params for signing in via Django backend
export interface ClientSignInParams {
  username: string; // Or email, depending on Django User model's USERNAME_FIELD and auth backend config
  password: string;
}

// Params for signing up via Django backend
export interface ClientSignUpParams {
  username: string;
  email: string;
  password: string;
  first_name?: string;
  last_name?: string;
  photoURL?: string; // snake_case to match User model/serializer expectation
}


// Props for UI components - adjust if they consume main model types directly
export interface InterviewCardProps {
  interviewId: string; // Keep as is if it's a prop name, not direct data field from API
  userId?: string;    // Prop name
  role: string;
  type: string;
  techstack: string[];
  created_at?: string; // If directly from API data, use created_at
  cover_image?: string; // If directly from API data, use cover_image
  level?: string;
  questions?: string[];
}

export interface AgentProps {
  userName: string;
  userId?: string;
  interviewId?: string;
  type: "generate" | "interview";
  questions?: string[];
  userAvatar?: string; // Prop name, can map from user.photo_url
}

export interface RouteParams {
  params: Promise<Record<string, string>>;
  searchParams: Promise<Record<string, string>>;
}

// These were specific to old Firebase actions, may no longer be needed
// or should be adapted if used by UI forms directly before calling new actions.
// For now, commented out, assuming new ClientSignInParams/ClientSignUpParams are used.
/*
export interface GetFeedbackByInterviewIdParams {
  interviewId: string;
  userId: string;
}

export interface GetLatestInterviewsParams {
  userId: string;
  limit?: number;
}
*/

type FormType = "sign-in" | "sign-up"; // Still relevant for UI state

export interface InterviewFormProps { // For the form creating an interview
  // These are form field names, not necessarily direct API model fields
  // The createInterview action will map these to the API payload
  // interviewId: string; // Not needed for creating new
  role: string;
  level: string;
  type: string;
  techstack: string[];
  amount: number; // Maps to max_questions in API call
}

export interface TechIconProps {
  techStack: string[];
}
